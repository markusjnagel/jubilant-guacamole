/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ErrorBody;
import org.openapitools.model.Etuusasia;
import java.util.UUID;
import org.openapitools.model.Varmistus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.Random;
import java.io.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-10T22:12:39.436355+02:00[Europe/Berlin]")
@Validated
@Api(value = "sagapoc", description = "the sagapoc API")
public interface SagapocApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /sagapoc/{asiaId}/varmistus
     * Poista asumistukiasian varmistus
     *
     * @param asiaId asumistukiasian asia-ID (uuid) (required)
     * @return asumistukiasian varmistus poistettu (status code 204)
     *         or Virhe pyyntösanomassa (status code 400)
     *         or Haettua tietoa ei löydy (status code 404)
     *         or Odottamaton virhe (status code 500)
     */
    @ApiOperation(value = "", nickname = "deleteVarmistaAsumistukiasia", notes = "Poista asumistukiasian varmistus", tags={ "SAGA POC", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "asumistukiasian varmistus poistettu"),
        @ApiResponse(code = 400, message = "Virhe pyyntösanomassa", response = ErrorBody.class),
        @ApiResponse(code = 404, message = "Haettua tietoa ei löydy", response = ErrorBody.class),
        @ApiResponse(code = 500, message = "Odottamaton virhe", response = ErrorBody.class) })
    @DeleteMapping(
        value = "/sagapoc/{asiaId}/varmistus",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteVarmistaAsumistukiasia(@ApiParam(value = "asumistukiasian asia-ID (uuid)",required=true) @PathVariable("asiaId") UUID asiaId) {
        
        int[] availableCodes = {204,400,404,500};
        Random r=new Random();        
      	int randomNumber=r.nextInt(availableCodes.length);
       
        return new ResponseEntity<>(HttpStatus.resolve(availableCodes[randomNumber]));

    }


    /**
     * POST /sagapoc/{asiaId}/varmistus
     * Varmista asumistukiasia
     *
     * @param asiaId asumistukiasian asia-ID (uuid) (required)
     * @return Varmistus (status code 200)
     *         or Virhe pyyntösanomassa (status code 400)
     *         or Haettua tietoa ei löydy (status code 404)
     *         or Odottamaton virhe (status code 500)
     */
    @ApiOperation(value = "", nickname = "postVarmistaAsumistukiasia", notes = "Varmista asumistukiasia", response = Varmistus.class, tags={ "SAGA POC", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Varmistus", response = Varmistus.class),
        @ApiResponse(code = 400, message = "Virhe pyyntösanomassa", response = ErrorBody.class),
        @ApiResponse(code = 404, message = "Haettua tietoa ei löydy", response = ErrorBody.class),
        @ApiResponse(code = 500, message = "Odottamaton virhe", response = ErrorBody.class) })
    @PostMapping(
        value = "/sagapoc/{asiaId}/varmistus",
        produces = { "application/json" }
    )
    default ResponseEntity<Varmistus> postVarmistaAsumistukiasia(@ApiParam(value = "asumistukiasian asia-ID (uuid)",required=true) @PathVariable("asiaId") UUID asiaId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ratkaisija\" : \"ratkaisija\", \"ratkaisupvm\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        int[] availableCodes = {200,400,404,500};
        Random r=new Random();        
      	int randomNumber=r.nextInt(availableCodes.length);
       
        return new ResponseEntity<>(HttpStatus.resolve(availableCodes[randomNumber]));

    }


    /**
     * PUT /sagapoc/{asiaId}/tila
     * Päivitä asianhallinnan etuusasian tila
     *
     * @param asiaId asumistukiasian asia-ID (uuid) (required)
     * @param etuusasia Päivitettävä etuusasia (required)
     * @return Asianhallinnan etuusasia (status code 200)
     *         or Virhe pyyntösanomassa (status code 400)
     *         or Haettua tietoa ei löydy (status code 404)
     *         or Odottamaton virhe (status code 500)
     */
    @ApiOperation(value = "", nickname = "putPaivitaAsianhallinnanEtuusasianTila", notes = "Päivitä asianhallinnan etuusasian tila", response = Etuusasia.class, tags={ "SAGA POC", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Asianhallinnan etuusasia", response = Etuusasia.class),
        @ApiResponse(code = 400, message = "Virhe pyyntösanomassa", response = ErrorBody.class),
        @ApiResponse(code = 404, message = "Haettua tietoa ei löydy", response = ErrorBody.class),
        @ApiResponse(code = 500, message = "Odottamaton virhe", response = ErrorBody.class) })
    @PutMapping(
        value = "/sagapoc/{asiaId}/tila",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Etuusasia> putPaivitaAsianhallinnanEtuusasianTila(@ApiParam(value = "asumistukiasian asia-ID (uuid)",required=true) @PathVariable("asiaId") UUID asiaId,@ApiParam(value = "Päivitettävä etuusasia" ,required=true )  @Valid @RequestBody Etuusasia etuusasia) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"etuus\" : \"etuus\", \"asiakasId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"ratkaisupvm\" : \"2000-01-23\", \"ratkaisuTyyppi\" : \"ratkaisuTyyppi\", \"tila\" : \"40\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        int[] availableCodes = {200,400,404,500};
        Random r=new Random();        
      	int randomNumber=r.nextInt(availableCodes.length);
       
        return new ResponseEntity<>(HttpStatus.resolve(availableCodes[randomNumber]));

    }

}
